// @flow

export interface Derivable<T> {

  derive<E>(f: (value: T) => E): Derivable<E>;

  maybeDerive<E>(f: $NonMaybeType<T> => E): Derivable<?E>;

  orDefault<E>(value: $NonMaybeType<E>): Derivable<$NonMaybeType<T> | E>;

  react(f: (value: T) => void, options?: Lifecycle<T>): void;

  maybeReact(f: (value: $NonMaybeType<T>) => void, options?: Lifecycle<T>): void;

  get(): T;

  is(other: mixed): Derivable<boolean>;

  withEquality(equals: (a: T, b: T) => *): Derivable<T>;
};

export interface Atom<T> extends Derivable<T> {

  set(value: T): void;

  update(f: (value: T) => T): void;
  update<A>(f: (value: T, A) => T, A): void;
  update<A, B>(f: (value: T, A, B) => T, A, B): void;
  update<A, B, C>(f: (value: T, A, B, C) => T, A, B, C): void;
  update<A, B, C, D>(f: (value: T, A, B, C, D) => T, A, B, C, D): void;
};

export interface Lens<T> extends Atom<T> {}

export interface LensDescriptor<T> {

  get(): T;

  set(value: T): void;
};

export interface Lifecycle<T> {

  +from?: (((d: Derivable<T>) => boolean) | Derivable<boolean>);

  +when?: (((d: Derivable<T>) => boolean) | Derivable<boolean>);

  +until?: (((d: Derivable<T>) => boolean) | Derivable<boolean>);

  +skipFirst?: boolean;

  +once?: boolean;
};

export interface Ticker {

  tick(): void;

  release(): void;
}

declare export function atom<T>(value: T): Atom<T>;

declare export function derive<T>(f: () => T): Derivable<T>;

declare export function lens<T>(descriptor: LensDescriptor<T>): Lens<T>;

declare export function transact(f: () => void): void;

declare export function transaction<F: Function>(f: F): F;

declare export function atomically(f: () => void): void;

declare export function atomic<F: Function>(f: F): F;

declare export function struct(obj: mixed): Derivable<mixed>;

declare export function unpack<T>(obj: Derivable<T> | T): T;

declare export function isAtom(obj: mixed): boolean;

declare export function isDerivable(obj: mixed): boolean;

declare export function isDerivation(obj: mixed): boolean;

declare export function isLens(obj: mixed): boolean;

declare export function setDebugMode(debugMode: boolean): void;

declare export function ticker(): Ticker;


// Private

declare export function __captureDereferences(fn: () => void): $ReadOnlyArray<Derivable<mixed>>;

declare export class __Reactor<T> {
  constructor(derivable: Derivable<T>, (value: T) => void): __Reactor<T>;
  start(): void;
  force(): void;
  stop(): void;
}
