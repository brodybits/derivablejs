// @flow

export type Derivable<T> = {

  derive<E>(f: (value: T) => E): Derivable<E>;

  maybeDerive<E>(f: $NonMaybeType<T> => E): Derivable<E>;

  orDefault<E>(value: $NonMaybeType<E>): Derivable<$NonMaybeType<T> | E>;

  react(f: (value: T) => void, options?: Lifecycle<T>): void;

  mReact(f: (value: $NonMaybeType<T>) => void, options?: Lifecycle<T>): void;

  get(): T;

  is(other: mixed): Derivable<boolean>;

  withEquality(equals: (a: T, b: T) => *): Derivable<T>;
};

export type Atom<T> = Derivable<T> & {

  set(value: T): void;

  update(f: (value: T, ...args: Array<mixed>) => T, ...args: Array<mixed>): void;

  proxy<E>(proxy: Proxy<T, E>): Atom<E>;
};

export type Proxy<ParentType, ChildType> = {

  get(source: ParentType): ChildType;

  set(source: ParentType, value: ChildType): ParentType;
};

export type CompositeProxy<T> = {

  get(): T;

  set(value: T): void;
};

export type Lifecycle<T> = {

  +from?: (((d: Derivable<T>) => boolean) | Derivable<boolean>);

  +when?: (((d: Derivable<T>) => boolean) | Derivable<boolean>);

  +until?: (((d: Derivable<T>) => boolean) | Derivable<boolean>);

  +skipFirst?: boolean;

  +once?: boolean;
};

declare export function atom<T>(value: T): Atom<T>;

declare export function derive<T>(f: () => T): Derivable<T>;

declare export function transact(f: () => void): void;

declare export function transaction<F: Function>(f: F): F;

declare export function atomically(f: () => void): void;

declare export function atomic<F: Function>(f: F): F;

declare export function struct(obj: mixed): Derivable<mixed>;

declare export function unpack(obj: mixed): mixed;

declare export function isAtom(obj: mixed): boolean;

declare export function isDerivable(obj: mixed): boolean;

declare export function isDerivation(obj: mixed): boolean;

declare export function isProxy(obj: mixed): boolean;

declare export function wrapPreviousState<A, B>(fn: (currentState: A, previousState: A) => B, init?: A): (currentState: A) => B;

declare export function captureDereferences(fn: () => void): Array<Derivable<mixed>>;

declare export function setDebugMode(debugMode: boolean): void;

declare type Ticker = {

  tick(): void;

  release(): void;
}

declare export function ticker(): Ticker;
